generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// =========================================== NextAuth ===========================================

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type              String
  provider          String
  providerAccountId String

  id_token      String?
  token_type    String?
  access_token  String?
  refresh_token String?

  scope         String?
  expires_at    Int?
  session_state String?

  oauth_token_secret String?
  oauth_token        String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sessionToken String   @unique
  expires      DateTime

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name          String?
  image         String?
  email         String?   @unique
  emailVerified DateTime?
  role          UserRole  @default(value: USER)

  accounts Account[]
  sessions Session[]

  posts    Post[]
  comments Comment[]
}

// ================================================================================================

enum PostCategory {
  education
  blacklist
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title     String
  text      String
  image     String?
  date      DateTime     @updatedAt
  category  PostCategory
  published Boolean      @default(false)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  comments Comment[]
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  text String
  date DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
}
